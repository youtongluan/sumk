/**
 * Copyright (C) 2016 - 2030 youtongluan.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.yx.db.visit;

import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.yx.db.conn.ConnectionPool;
import org.yx.db.enums.DBType;
import org.yx.db.event.DBEvent;
import org.yx.db.event.ModifyEvent;
import org.yx.db.sql.ColumnMeta;
import org.yx.db.sql.DBSettings;
import org.yx.db.sql.InsertResult;
import org.yx.db.sql.MapedSql;
import org.yx.db.sql.PojoMeta;
import org.yx.db.sql.SelectBuilder;
import org.yx.db.sql.SqlBuilder;

public final class Visitors {

	public static interface Transform<T> {
		T transFrom(ResultSet ret) throws Exception;
	}

	public static class QueryVisitor<T> implements SumkDbVisitor<T> {
		private final Transform<T> transform;

		private QueryVisitor(Transform<T> transform) {
			this.transform = transform;
		}

		@Override
		public T visit(SqlBuilder builder) throws Exception {
			MapedSql maped = builder.toMapedSql();
			Connection conn = ConnectionPool.get().connection(DBSettings.readType());
			try (SumkStatement statement = SumkStatement.create(conn, maped)) {
				ResultSet ret = statement.executeQuery();
				T list = this.transform.transFrom(ret);
				return list;
			}
		}

	}

	public static final SumkDbVisitor<Integer> modifyVisitor = builder -> {
		ConnectionPool pool = ConnectionPool.get();
		MapedSql maped = builder.toMapedSql();
		int ret;
		try (SumkStatement statement = SumkStatement.create(pool.connection(DBType.WRITE), maped)) {
			ret = statement.executeUpdate();
		}
		if (ret > 0) {
			DBEvent md = maped.getEvent();
			if (md instanceof ModifyEvent) {
				ModifyEvent me = (ModifyEvent) md;
				me.setAffected(ret);
			}
			pool.pubuishModify(md);
		}
		return ret;
	};

	public static final SumkDbVisitor<InsertResult> insertWithAutoGeneratedKeysVisitor = builder -> {
		Connection conn = ConnectionPool.get().connection(DBType.WRITE);
		MapedSql maped = builder.toMapedSql();
		try (SumkStatement statement = SumkStatement.createAutoGenerateKeyStatement(conn, maped)) {
			int count = statement.executeUpdate();
			ResultSet rs = statement.getGeneratedKeys();
			List<Long> keys = new ArrayList<>();
			InsertResult result = new InsertResult(count, keys);
			if (rs != null && rs.getMetaData().getColumnCount() > 0) {
				if (rs.next()) {
					keys.add(rs.getLong(1));
				}
			}
			rs.close();

			return result;
		}
	};

	public static final SumkDbVisitor<List<Map<ColumnMeta, Object>>> queryVisitorForORM = builder -> {
		MapedSql maped = builder.toMapedSql();
		Connection conn = ConnectionPool.get().connection(DBSettings.readType());
		try (SumkStatement statement = SumkStatement.create(conn, maped)) {
			ResultSet ret = statement.executeQuery();
			PojoMeta pm = ((SelectBuilder) builder).makeSurePojoMeta();
			return ResultSetUtils.toMapList(ret, pm);
		}
	};

	public static final SumkDbVisitor<List<Map<String, Object>>> queryVisitor = new QueryVisitor<>(
			ResultSetUtils::toMapList);

	public static final SumkDbVisitor<List<?>> singleListQueryVisitor = new QueryVisitor<>(ResultSetUtils::toList);

	public static final SumkDbVisitor<List<Object[]>> arrayListQueryVisitor = new QueryVisitor<>(
			ResultSetUtils::toObjectArrayList);
}
